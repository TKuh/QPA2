#! @Chapter Quiver algebras

#! We use the term **quiver algebra** for an algebra that is
#! either a path algebra or a quotient of a path algebra by
#! some ideal.

#! @Section Categories for algebras, elements and ideals

#! @Description
#!  Category for elements of quiver algebras.
DeclareCategory( "IsQuiverAlgebraElement", IsRingElementWithOne );

#! @Description
#!  Category for quiver algebras.
DeclareCategory( "IsQuiverAlgebra", IsAlgebraWithOne and CategoryCollections( IsQuiverAlgebraElement ) );

#! @Description
#!  Category for elements of path algebras.
DeclareCategory( "IsPathAlgebraElement", IsQuiverAlgebraElement );

#! @Description
#!  Category for path algebras.
DeclareCategory( "IsPathAlgebra", IsQuiverAlgebra );

#! @Description
#!  Category for (two-sided) ideals in path algebras.
DeclareCategory( "IsPathIdeal", IsRing );

#! @Description
#!  Category for elements of quotients of path algebras.
DeclareCategory( "IsQuotientOfPathAlgebraElement", IsQuiverAlgebraElement );

#! @Description
#!  Category for quotients of path algebras.
DeclareCategory( "IsQuotientOfPathAlgebra", IsQuiverAlgebra );


#! @Section Constructing algebras

#! @Arguments k, Q
#! @Description
#!  Constructs the path algebra over the field <A>k</A>
#!  using the quiver <A>Q</A>.
DeclareOperation( "PathAlgebra", [ IsField, IsQuiver ] );

#! @InsertChunk Example_PathAlgebra

#! @BeginGroup QuotientOfPathAlgebra
#! @Description
#!  Constructs a quotient of a path algebra.
#!  <P/>
#!  The first argument is a path algebra <A>kQ</A>.
#!  The second argument is either an ideal <A>I</A> in the algebra <A>kQ</A>
#!  or a list <A>relations</A> of elements of <A>kQ</A>.
#!  The result is <A>kQ</A> divided by the ideal <A>I</A>,
#!  or by the ideal generated by <A>relations</A>.
#!  <P/>
#!  The <C>/</C> operator is defined to do the same as <C>QuotientOfPathAlgebra</C>,
#!  so <C>QuotientOfPathAlgebra( <A>kQ</A>, <A>I</A> )</C> or
#!  <C>QuotientOfPathAlgebra( <A>kQ</A>, <A>relations</A> )</C>
#!  can also be written as
#!  <C><A>kQ</A>/<A>I</A></C> or
#!  <C><A>kQ</A>/<A>relations</A></C>.
#! @Arguments kQ, I
DeclareOperation( "QuotientOfPathAlgebra", [ IsPathAlgebra, IsPathIdeal ] );
#! @Arguments kQ, relations
DeclareOperation( "QuotientOfPathAlgebra", [ IsPathAlgebra, IsHomogeneousList ] );
#! @Arguments kQ, I
DeclareOperation( "\/", [ IsPathAlgebra, IsPathIdeal ] );
#! @Arguments kQ, relations
DeclareOperation( "\/", [ IsPathAlgebra, IsHomogeneousList ] );
#! @EndGroup

#! @InsertChunk Example_QuotientOfPathAlgebra

#! @Section Information about an algebra

#! @Arguments A
#! @Returns <Ref Filt="IsQuiver"/>
#! @Description
#!  Returns the quiver Q of the quiver algebra <A>A</A> = kQ/I.
DeclareAttribute( "QuiverOfAlgebra", IsQuiverAlgebra );

#! @Arguments A
#! @Returns list of <Ref Filt="IsPathAlgebraElement"/>
#! @Description
#!  Returns a list of relations for the quiver algebra <A>A</A>.
#!  That is, if $<A>A</A> = kQ/I$, this operation returns a list
#!  of generators for the ideal $I$.
#!  If <A>A</A> is a path algebra, this operation returns the empty list.
DeclareAttribute( "RelationsOfAlgebra", IsQuiverAlgebra );

#! @Arguments A
#! @Returns <Ref Filt="IsPathIdeal"/>
#! @Description
#!  For a quotient <A>A</A> = kQ/I of a path algebra,
#!  this operation returns the ideal I.
DeclareAttribute( "IdealOfQuotient", IsQuotientOfPathAlgebra );

# field of a QuiverAlgebra: LeftActingDomain

#! @Arguments A
#! @Returns <Ref Filt="IsPathAlgebra"/>
#! @Description
#!  Given a quiver algebra <A>A</A> = kQ/I, this operation returns
#!  the path algebra kQ.
DeclareAttribute( "PathAlgebra", IsQuiverAlgebra );


#! @Section Accessing algebra elements

#! @BeginGroup PathAlgebraElement
#! @Description
#!  Creates an element of a path algebra.
#! @Arguments kQ, coefficients, paths
DeclareGlobalFunction( "PathAlgebraElement" );
#! @Arguments kQ, coefficients, paths
DeclareGlobalFunction( "PathAlgebraElementNC" );
#! @EndGroup

#! @Arguments A, e
#! @Description
#!  Given a quotient <A>A</A> = kQ/I of a path algebra kQ,
#!  and an element <A>e</A> of kQ, this operation produces
#!  the element of <A>A</A> represented by <A>e</A>.
DeclareGlobalFunction( "QuotientOfPathAlgebraElement" );

#! @Arguments A, p
#! @Description
#!  Returns the path <A>p</A> as an element of the quiver algebra <A>A</A>.
DeclareOperation( "PathAsAlgebraElement", [ IsQuiverAlgebra, IsPath ] );

#! @BeginGroup AlgebraElementByLabel
#! @Description
#!  Returns the primitive path (vertex or arrow) with label <A>label</A>,
#!  as an element of the quiver algebra <A>A</A>.
#!  If no such path exists, then <C>fail</C> is returned.
#!  The operation <C><A>A</A>[ <A>label</A> ]</C> is equivalent to
#!  <C>AlgebraElementByLabel( <A>A</A>, <A>label</A> )</C>.
#! @Returns <Ref Filt="IsQuiverAlgebraElement"/> or <C>fail</C>
#! @Arguments A, label
DeclareOperation( "AlgebraElementByLabel", [ IsQuiverAlgebra, IsObject ] );
#! @Arguments A, label
DeclareOperation( "\[\]", [ IsQuiverAlgebra, IsObject ] );
#! @EndGroup

#! @Arguments A, string
#! @Description
#!  Returns the path described by the string <A>string</A>
#!  (see <Ref Oper="PathFromString"/>)
#!  as an element of the quiver algebra <A>A</A>.
#!  If no such path exists, then <C>fail</C> is returned.
#!  <P/>
#!  This operation can also be called by writing <C><A>A</A>.str</C>,
#!  where <C>str</C> is an unquoted string literal.
DeclareOperation( "AlgebraElementFromString", [ IsQuiverAlgebra, IsString ] );


#! @Section Information about an element

#! @Arguments e
#! @Returns <Ref Filt="IsQuiverAlgebra"/>
#! @Description
#!  Returns the quiver algebra the element <A>e</A> belongs to.
DeclareAttribute( "AlgebraOfElement", IsQuiverAlgebraElement );

#! @Arguments e
DeclareAttribute( "Coefficients", IsQuiverAlgebraElement );

#! @Arguments e
DeclareAttribute( "Paths", IsQuiverAlgebraElement );

#! @Arguments e
#! @Returns <C>true</C> or <C>false</C>
#! @Description
#!  Checks whether the element <A>e</A> is uniform,
#!  that is, whether all paths in the element have the same
#!  source and the same target.
DeclareProperty( "IsUniform", IsQuiverAlgebraElement );

#! @Arguments e
#! @Returns <Ref Filt="IsPathAlgebraElement"/>
#! @Description
#!  Returns the canonical representative path algebra element
#!  of the element <A>e</A> of a quotient of a path algebra.
DeclareAttribute( "Representative", IsQuotientOfPathAlgebraElement );


#! @Section Operations related to Groebner basis theory

DeclareAttribute( "LeadingPath", IsPathAlgebraElement );
DeclareOperation( "LeadingCoefficient", [ IsPathAlgebraElement ] );
DeclareAttribute( "LeadingTerm", IsPathAlgebraElement );
DeclareAttribute( "NonLeadingTerms", IsPathAlgebraElement );
DeclareOperation( "DivideByList", [ IsPathAlgebraElement, IsList ] );
DeclareOperation( "Reduce", [ IsPathAlgebraElement, IsList ] );
DeclareOperation( "OverlapRelation",
                  [ IsPathAlgebraElement, IsPathAlgebraElement,
                    IsPath, IsPath ] );
DeclareOperation( "OverlapRelations",
                  [ IsPathAlgebraElement, IsPathAlgebraElement ] );
DeclareOperation( "TipReduce", [ IsCollection ] );
DeclareOperation( "ComputeGroebnerBasis", [ IsList ] );
DeclareAttribute( "GroebnerBasis", IsPathIdeal );
